---
openapi: 3.0.0
info:
  title: api
  description: API for  project
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/Ronen96/Register/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: users
- name: auth
- name: league
- name: players
- name: teams
- name: admin
paths:
  /Register:
    post:
      tags:
      - auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: Username already exist
  /Login:
    post:
      tags:
      - auth
      summary: A signed up user logging in
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
        required: true
      responses:
        "200":
          description: login succeeded
        "400":
          description: wrong input parameters
        "401":
          description: Username or Password incorrect
  /Logout:
    post:
      tags:
      - auth
      summary: A signed up user logging out
      responses:
        "200":
          description: User logged out
  /players/SearchPlayerByName/{playerName}:
    get:
      tags:
      - players
      summary: Search Player By Name
      parameters:
      - name: playerName
        in: path
        description: player info
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: yossi benayun
      responses:
        "200":
          description: data of the specific player name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
        "404":
          description: Player not found
  /players/SearchPlayerById/{playerId}:
    get:
      tags:
      - players
      summary: Search Player By Id
      parameters:
      - name: playerId
        in: path
        description: player info
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 122
      responses:
        "200":
          description: data of the specific player Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
        "404":
          description: Player not found
  /teams/SearchTeamById/{teamId}:
    get:
      tags:
      - teams
      summary: Search team By Id
      parameters:
      - name: teamId
        in: path
        description: team info
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          example: 341
      responses:
        "200":
          description: data of the specific team Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "404":
          description: Team  not found
  /teams/SearchTeamByName/{teamName}:
    get:
      tags:
      - teams
      summary: Search team By Name
      parameters:
      - name: teamName
        in: path
        description: team info
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: monaco
      responses:
        "200":
          description: data of the specific team name
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "404":
          description: Team  not found
  /users/favoriteGames:
    get:
      tags:
      - users
      summary: get all favorite games of user
      responses:
        "200":
          description: show all favorite games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
    post:
      tags:
      - users
      summary: add game to list of favorites if user
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              example: 39
        required: true
      responses:
        "201":
          description: The game successfully saved as favorite
        "409":
          description: game already saved as favorite
  /admin/AddGame:
    post:
      tags:
      - admin
      summary: add game to system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/game'
        required: true
      responses:
        "200":
          description: The game was successfully added
        "204":
          description: A team cannot play againts itself
        "404":
          description: Game  not found
  /admin/AddReferee:
    post:
      tags:
      - admin
      summary: add game to system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/referee'
        required: true
      responses:
        "200":
          description: The referee was successfully assigned
        "404":
          description: Game not found
  /admin/AddEvent:
    post:
      tags:
      - admin
      summary: add game to system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
        required: true
      responses:
        "200":
          description: The event was successfully added
        "404":
          description: Game not found
  /admin/AddScore:
    post:
      tags:
      - admin
      summary: add score to game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        "200":
          description: The score was successfully updated
        "404":
          description: Game not found
  /league/getDetails:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show all favorite games
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/league'
        "204":
          description: No favorite games
  /league/getAllGames:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show all league games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
  /league/pastGames:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show past games in league
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
  /league/futureGames:
    get:
      tags:
      - league
      summary: get all favorite games of user
      responses:
        "200":
          description: show future games in league
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/game'
        "204":
          description: No favorite games
components:
  schemas:
    UserRegister:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
        firstname:
          type: string
          description: user's first name
          example: Bob
        lastname:
          type: string
          description: user's last name
          example: Cohen
        country:
          type: string
          description: user's country
          example: greece
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password contains between 5 to 10 chars, at least one of them is a number and a special char
          format: password
          example: hantrish!9
        email:
          type: string
          description: user's email
          format: email
          example: bibiKing@walla.com
        image-url:
          type: string
          description: URL for the user's logo
          format: URL
          example: https://cloudinary.com/bibi
      description: Model containing user info
    UserLogin:
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
        password:
          maxLength: 10
          minLength: 5
          type: string
          format: password
    team:
      type: object
      properties:
        players:
          type: array
          items:
            $ref: '#/components/schemas/player'
        name:
          type: string
          example: Chelsea FC
        favorite:
          type: boolean
          description: team is in list of favorite teams by user
          example: true
      description: team info
    player:
      type: object
      properties:
        common name:
          type: string
          description: player's name
          example: Didier Drogba
        nationality:
          type: string
          description: player's nationality
          example: Cote Dlvoire
        date of birth:
          type: string
          description: player's date of birth
          format: date-time
          example: 1992-05-26T23:20:50.52Z
        country of birth:
          type: string
          description: player's country of birth
          example: Cote Dlvoire
        height:
          type: number
          description: player's height
          example: 1.85
        weight:
          type: number
          description: player's weight
          example: 75
        favorite:
          type: boolean
          description: player is in list of favorite players by user
          example: true
      description: player info
    league:
      type: object
      properties:
        name:
          type: string
          description: league's name
          example: superliga
        season:
          type: string
          description: season's name
          example: 2018/19
        stage:
          type: integer
          description: league's stage
          example: 4
        next game:
          $ref: '#/components/schemas/game'
      description: league info
    game:
      type: object
      properties:
        date:
          type: string
          description: game's full date
          format: small date-time
          example: 1992-05-26T23:20:50.52Z
        homeTeamId:
          type: integer
          description: Id of home team
          example: 653
        awayTeamId:
          type: integer
          description: Id of away team
          example: 939
        stadium:
          type: string
          description: game's stadium
          example: Stamford Bridge
        referee:
          type: string
          description: game's referee
          example: Mike Dean
        homeTeamScore:
          type: integer
          description: score of home team
          example: 4
        awayTeamScore:
          type: integer
          description: score of away team
          example: 0
      description: game info
    event:
      type: object
      properties:
        type:
          type: string
          description: event's type
          example: red card
        date:
          type: string
          description: event's full date
          format: small date-time
          example: 1992-05-26T23:20:50.52Z
        minuteOfGame:
          type: integer
          description: minute of game
          example: 22
        game_id:
          type: integer
          description: game id that the event happened in
          example: 32
        player_id:
          type: integer
          description: player id that made the event
          example: 44
        description:
          type: string
          description: event's description
          example: red card to sergio ramos
      description: event info
    referee:
      type: string
      description: game's referee
      example: Mike Dean
    inline_response_200:
      properties:
        team:
          $ref: '#/components/schemas/team'
        past-games:
          type: array
          items:
            $ref: '#/components/schemas/game'
        future-games:
          type: array
          items:
            $ref: '#/components/schemas/game'
    inline_response_200_1:
      properties:
        team:
          $ref: '#/components/schemas/team'
    body:
      type: object
      properties:
        game_id:
          type: integer
          description: game id
          example: 20
        homeTeamScore:
          type: integer
          description: score of the home team
          example: 2
        awayTeamScore:
          type: integer
          description: score of the away team
          example: 2
